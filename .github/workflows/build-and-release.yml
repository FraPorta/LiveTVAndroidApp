name: Build and Release Android APK

on:
  # Trigger on push to main/master branch
  push:
    branches: [ master, main ]
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'
  
  # Trigger on pull request to main/master
  pull_request:
    branches: [ master, main ]
  
  # Allow manual trigger
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Make gradlew executable
      run: chmod +x gradlew
      
    - name: Clean project
      run: ./gradlew clean
      
    - name: Build debug APK
      if: github.event_name == 'pull_request' || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'debug')
      run: ./gradlew assembleDebug
      
    - name: Build release APK
      if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.release_type == 'release')
      run: ./gradlew assembleRelease
      
    - name: Get version info
      id: version
      run: |
        # Extract version from gradle.properties or build.gradle.kts
        VERSION_NAME=$(grep -E "versionName|version\s*=" app/build.gradle.kts | head -1 | sed -E 's/.*["\047]([^"\047]+)["\047].*/\1/' || echo "1.0.0")
        VERSION_CODE=$(grep -E "versionCode" app/build.gradle.kts | head -1 | sed -E 's/.*versionCode\s*=?\s*([0-9]+).*/\1/' || echo "1")
        COMMIT_HASH=$(git rev-parse --short HEAD)
        BUILD_DATE=$(date +'%Y%m%d-%H%M%S')
        
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
        echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT
        echo "build_date=$BUILD_DATE" >> $GITHUB_OUTPUT
        echo "tag_name=v$VERSION_NAME-$BUILD_DATE-$COMMIT_HASH" >> $GITHUB_OUTPUT
        
    - name: Rename APK files
      run: |
        # Create output directory
        mkdir -p output
        
        # Copy and rename APK files with version info
        if [ -f app/build/outputs/apk/debug/app-debug.apk ]; then
          cp app/build/outputs/apk/debug/app-debug.apk output/LiveTV-v${{ steps.version.outputs.version_name }}-${{ steps.version.outputs.build_date }}-${{ steps.version.outputs.commit_hash }}-debug.apk
        fi
        
        if [ -f app/build/outputs/apk/release/app-release-unsigned.apk ]; then
          cp app/build/outputs/apk/release/app-release-unsigned.apk output/LiveTV-v${{ steps.version.outputs.version_name }}-${{ steps.version.outputs.build_date }}-${{ steps.version.outputs.commit_hash }}-release-unsigned.apk
        fi
        
        if [ -f app/build/outputs/apk/release/app-release.apk ]; then
          cp app/build/outputs/apk/release/app-release.apk output/LiveTV-v${{ steps.version.outputs.version_name }}-${{ steps.version.outputs.build_date }}-${{ steps.version.outputs.commit_hash }}-release.apk
        fi
        
        # List files for verification
        ls -la output/
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v3
      with:
        name: LiveTV-APKs-${{ steps.version.outputs.tag_name }}
        path: output/*.apk
        retention-days: 30
        
    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        release_name: LiveTV Android App ${{ steps.version.outputs.tag_name }}
        body: |
          ## LiveTV Android App - Release ${{ steps.version.outputs.version_name }}
          
          **Build Information:**
          - Version: ${{ steps.version.outputs.version_name }}
          - Version Code: ${{ steps.version.outputs.version_code }}
          - Commit: ${{ steps.version.outputs.commit_hash }}
          - Build Date: ${{ steps.version.outputs.build_date }}
          
          **Features:**
          - Live TV streaming with multiple sources
          - Football section as default
          - Pagination for improved performance
          - Modern Material Design UI
          - Configurable scraping source URL
          - Intent chooser for stream links
          - Acestream and Web stream support
          
          **Installation:**
          1. Download the APK file below
          2. Enable "Unknown Sources" in your Android settings
          3. Install the APK
          
          **Changes in this release:**
          - Auto-generated from latest commit on master branch
          - See commit history for detailed changes
          
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: output/LiveTV-v${{ steps.version.outputs.version_name }}-${{ steps.version.outputs.build_date }}-${{ steps.version.outputs.commit_hash }}-release-unsigned.apk
        asset_name: LiveTV-${{ steps.version.outputs.tag_name }}.apk
        asset_content_type: application/vnd.android.package-archive
        
  notification:
    runs-on: ubuntu-latest
    needs: build
    if: always()
    
    steps:
    - name: Build Status Notification
      run: |
        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "‚úÖ Build completed successfully!"
          echo "üì± APK files are available in the artifacts section"
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo "üöÄ New release has been created"
          fi
        else
          echo "‚ùå Build failed!"
          echo "Please check the logs for more information"
        fi
